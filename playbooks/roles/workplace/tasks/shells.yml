- include_vars: "{{ item }}"
  tags: [shells]
  with_items:
    - common.yml
    - paths.yml
    - xsession.yml
    - shells.yml

- name: ensure home subdirs exist
  tags: [shells, home]
  file:
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: directory
  with_items: "{{ shells_homedir_subdirs }}"

- name: copy homedir files
  tags: [shells, home]
  copy:
    src: "{{ role_path }}/files/{{ item.src }}"
    dest: "{{ ansible_env.HOME }}/{{ item.dest }}"
    mode: 0755
  with_items: "{{ shells_homedir_files }}"

- name: copy custom scripts
  tags: [shells, scripts]
  copy:
    src: "{{ role_path }}/files/scripts/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: 0755
  with_items: "{{ shells_custom_scripts }}"
  become: yes

- name: shells | collect binaries
  tags: [shells]
  shell: "which {{ item }}"
  register: user_shell_binaries
  with_items:
    - "{{ user_shells }}"

- name: Populate shell binaries
  tags: [shells]
  set_fact:
    user_shell_binaries: "{{ user_shell_binaries | default({}) | combine( {item.item: item.stdout} ) }}"
  with_items: "{{ user_shell_binaries.results }}"

- name: ensure groups exist
  tags: [shells]
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ default_user_groups }}"
  become: yes

- name: ensure default user traits
  tags: [shells]
  user:
    name: "{{ default_user_name }}"
    shell: "{{ user_shell_binaries[default_user_shell] }}"
    groups: "{{ default_user_groups | join(',') }}"
  become: yes

- name: instantiate common settings
  tags: [shells]
  copy:
    content: "{{ lookup('template', 'shell/{{ item }}.template') }}"
    dest: "{{ ansible_env.HOME }}/{{ item }}"
    mode: 0755
  with_items:
    - "{{ common_settings_basenames }}"

- name: check if .bashrc exists
  tags: [shells, bash]
  stat: path={{ ansible_env.HOME }}/.bashrc
  register: bashrc

- name: source common settings
  tags: [shells, bash]
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    line: "source ~/common_settings_bash"
    state: present
  when:
    - bashrc.stat.exists == True

- name: generate shell settings for StumpWM
  tags: [shells]
  copy:
    content: "{{ lookup('template', 'shell/shell.lisp.template') }}"
    dest: "{{ stumpwm_config_path }}/shell.lisp"
    mode: 0755

- name: Antibody | generate plugins list
  tags: [shells, zsh]
  copy:
    content: "{{ lookup('template', 'shell/zsh.plugins.template') }}"
    dest: "{{ zsh_plugins_list_location }}"
    mode: 0755

- name: Antibody | bundle plugins statically
  tags: [shells, zsh]
  shell: "{{ zsh_plugins_antibody_bundle_command }}"

- name: instantiate .zshrc
  tags: [shells, zsh]
  copy:
    content: "{{ lookup('template', 'shell/.zshrc.template') }}"
    dest: "{{ ansible_env.HOME }}/.zshrc"
    mode: 0755

- name: tmux | instantiate sessions script
  tags: [shell, tmux]
  copy:
    content: "{{ lookup('template', 'shell/tmux-sessions.template') }}"
    dest: "{{ ansible_env.HOME }}/tmux-sessions"
    mode: 0755

- name: backup bookmarks
  tags: [shells, backup]
  copy:
    src: "{{ ansible_env.HOME }}/.bookmarks"
    dest: "{{ playbook_dir }}/../private/bookmarks/.bookmarks"
    mode: 0755

- name: restore bookmarks
  tags: [shells, restore]
  copy:
    src: "{{ playbook_dir }}/../private/bookmarks/.bookmarks"
    dest: "{{ ansible_env.HOME }}/.bookmarks"
    mode: 0755

- name: tmuxifier | update configs
  tags: [shells, tmuxifier]
  blockinfile:
    dest: "{{ ansible_env.HOME }}/{{ item[0] }}"
    insertafter: "{{ item[1].after }}"
    block: |
      {{ item[1].block }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item[1].idx }}"
    state: present
  with_nested:
    - "{{ common_settings_basenames }}"
    - [{ idx: 1,  block: "    $HOME/.tmuxifier/bin", after: "^BIN_DIRS=\\(" },
    { idx: 2, block: "eval \"$(tmuxifier init -)\"", after: "EOF"}]
    # TODO: think of way to rerun some links/path population steps after this

- name: Zshnip | configure Zsh
  tags: [shells, zshnip]
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.zsh/custom"
    line: "source zshnip.zsh"
    state: present

- name: Zshnip | configure Zsh | bind keys
  tags: [shells, zshnip]
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zsh/bindkeys"
    line: "{{ item }}"
  with_items:
    - "\nbindkey '\ej' zshnip-expand-or-edit"
    - "bindkey '\ee' zshnip-edit-and-expand"
