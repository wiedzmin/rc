---

- include_vars: "{{ item }}"
  tags: [custom, shepherd, tmux, buildapp, gqs, tg, tmuxifier, golang, hr]
  with_items:
    - custom.yml
    - "{{ playbook_dir }}/../private/private_vars.yml"

- name: custom | accompanying tools | shepherd (scheduling) | get
  tags: [custom, shepherd]
  git:
    repo: "{{ shepherd_traits.clone_from }}"
    dest: "{{ shepherd_traits.local_path }}"
    force: yes
  when: ansible_distribution == "Gentoo"

- name: custom | accompanying tools | shepherd (scheduling) | build
  tags: [custom, shepherd]
  shell: go build -o shepherd main.go
  args:
    chdir: "{{ shepherd_traits.local_path }}"
  when: ansible_distribution == "Gentoo"

- name: custom | accompanying tools | shepherd (scheduling) | install
  tags: [custom, shepherd]
  shell: "mv {{ shepherd_traits.local_path }}/{{ shepherd_traits.binary }} {{ binaries_prefix }}/{{ shepherd_traits.binary }}"
  become: yes
  when: ansible_distribution == "Gentoo"

- name: custom | install tmux plugin manager
  tags: [custom, tmux]
  git:
    repo: https://github.com/tmux-plugins/tpm
    dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    force: yes

- name: custom | Buildapp | clone repo
  tags: [custom, buildapp]
  git:
    repo: "{{ buildapp_traits.clone_from }}"
    dest: "{{ buildapp_traits.local_path }}"
    force: yes

- name: custom | Buildapp
  tags: [custom, buildapp]
  make:
    chdir: "{{ buildapp_traits.local_path }}"
    target: "{{ item }}"
  with_items:
    - buildapp
    - install
  become: yes
  when: ansible_distribution == "Gentoo"

- name: custom | build Buildapp
  tags: [custom, buildapp]
  shell: "sbcl --eval \"(ql:quickload 'buildapp)\" --eval \"(buildapp:build-buildapp)\""
  args:
    chdir: "{{ buildapp_traits.local_path }}"
  when: ansible_distribution == "NixOS"

- name: custom | install Buildapp
  tags: [custom, buildapp]
  copy:
    src: "{{ buildapp_traits.local_path }}/buildapp"
    dest: "{{ binaries_prefix[ansible_distribution].path }}/buildapp"
    mode: 0755
  become: "{{ binaries_prefix[ansible_distribution].become | default(False)}}"
  when: ansible_distribution == "NixOS"

- name: custom | cleanup Buildapp build
  tags: [custom, buildapp]
  file:
    path: "{{ buildapp_traits.local_path }}/buildapp"
    state: absent
  when: ansible_distribution == "NixOS"

- name: custom | git-quick-stats | clone repository
  tags: [custom, gqs]
  git:
    repo: "{{ gqs_traits.clone_from }}"
    dest: "{{ gqs_traits.local_path }}"
    force: yes

- name: custom | git-quick-stats | install
  tags: [custom, gqs]
  make:
    chdir: "{{ gqs_traits.local_path }}"
    target: install
  become: yes
  when: ansible_distribution == "Gentoo"

- name: custom | git-quick-stats | install
  tags: [custom, gqs]
  copy:
    src: "{{ gqs_traits.local_path }}/git-quick-stats"
    dest: "{{ binaries_prefix[ansible_distribution].path }}/git-quick-stats"
    mode: 0755
  become: "{{ binaries_prefix[ansible_distribution].become | default(False)}}"
  when: ansible_distribution == "NixOS"

- name: custom | git-quick-stats | set permissions
  tags: [custom, gqs]
  file:
    path: "{{ binaries_prefix }}/git-quick-stats"
    mode: 0755
  become: yes
  when: ansible_distribution == "Gentoo"

- name: custom | TG Desktop | check local archive
  tags: [custom, tg]
  stat:
    path: /tmp/tsetup.tar.xz
  register: tsetup
  when: ansible_distribution == "Gentoo"

- name: custom | TG Desktop | download archive
  tags: [custom, tg]
  get_url:
    url: "https://updates.tdesktop.com/tlinux/tsetup.{{ telegram_version }}.tar.xz"
    dest: /tmp/tsetup.tar.xz
    force: yes
  when: not tsetup.stat.exists and ansible_distribution == "Gentoo"

- name: custom | TG Desktop | update binaries
  tags: [custom, tg]
  unarchive:
    src: /tmp/tsetup.tar.xz
    dest: /usr/local/bin
    extra_opts:
      - "--strip=1"
  become: yes
  when: ansible_distribution == "Gentoo"

# TODO: think of TG themes automation

# TODO: (alex3rd) add to bin_dirs in "workplace"
- name: custom | tmuxifier | clone repo
  tags: [custom, tmuxifier]
  git:
    repo: "{{ tmuxifier_traits.clone_from }}"
    dest: "{{ tmuxifier_traits.local_path }}"
    force: yes

- name: custom | httplab | install
  tags: [custom, golang]
  shell: go get github.com/gchaincl/httplab
  when: ansible_distribution == "Gentoo"

- name: custom | httplab | install
  tags: [custom, golang]
  shell: go get github.com/asciimoo/wuzz
  when: ansible_distribution == "Gentoo"

- name: custom | hr | clone repository
  tags: [custom, hr]
  git:
    repo: "{{ hr_traits.clone_from }}"
    dest: "{{ hr_traits.local_path }}"
    force: yes

- name: custom | hr | install
  tags: [custom, hr]
  make:
    chdir: "{{ hr_traits.local_path }}"
    target: install
  become: yes

- name: custom | FFDC | clone repo
  tags: [custom, ffdc]
  git:
    repo: "{{ ffdc_traits.clone_from }}"
    dest: "{{ ffdc_traits.local_path }}"
    force: yes

- name: custom | FFDC | install
  tags: [custom, ffdc]
  copy:
    src: "{{ ffdc_traits.local_path }}/firefox_decrypt.py"
    dest: "{{ binaries_prefix[ansible_distribution].path }}/firefox_decrypt.py"
    mode: 0755
  become: "{{ binaries_prefix[ansible_distribution].become | default(False)}}"
