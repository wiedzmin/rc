- hosts: localhost

  vars:
    ripgrep_repo_location: /tmp/ripgrep
    mail_configs_dir: "{{ playbook_dir }}/../conf.d/user/mail"
    imapfilter_d_path: "{{ mail_configs_dir }}/imapfilter.d"
    imapfilter_config: "{{ mail_configs_dir }}/imapfilter-config.lua"
    openrc_services_list:
      - shepherd
      - job-vpn
      - sshuttle

  tasks:

    - include_vars: common_vars.yml
      tags:
        - always

    - name: accompanying tools | bootstrap Buildapp tool
      shell: sbcl --eval "(ql:quickload 'buildapp)" --eval "(buildapp:build-buildapp \"{{ project_root }}/utils/buildapp\")"
      tags:
        - infra

    - name: tools | generate openrc templates
      template: src={{ project_root }}/conf.d/system/openrc/{{ item }}.openrc dest=./{{ item }}.openrc.entry
      with_items: "{{ openrc_services_list }}"
      tags:
        - openrc

    - name: tools | install openrc entries
      copy: src={{ item }}.openrc.entry dest=/etc/init.d/{{ item }} mode=0755
      become: true
      with_items: "{{ openrc_services_list }}"
      tags:
        - openrc

    - name: tools | openrc local cleanup
      file: path={{ item }}.openrc.entry state=absent
      with_items:  "{{ openrc_services_list }}"
      tags:
        - openrc

    - name: accompanying tools | shepherd build (mail checking tool)
      make:
        chdir: "{{ project_root }}/src/shepherd"
        target: all
      tags:
        - shepherd
        - mail

    - name: accompanying tools | shepherd install (mail checking tool)
      shell: "mv {{ project_root }}/src/shepherd/builds/shepherd {{ project_root }}/utils/shepherd"
      tags:
        - shepherd
        - mail

    - name: accompanying tools | shepherd | restart service
      service: name=shepherd state=restarted
      become: true
      tags:
        - shepherd
        - service

    - name: ensure VPN custom config directory exist
      file:
        path={{ item }}
        state=directory
        mode=0755
        owner=octocat
        group=octocat
        recurse=yes
      become: true
      with_items:
        - '/etc/custom_vpn'
      tags:
        - vpn
        - prepare

    - name: cleanup VPN custom config directory
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "/etc/custom_vpn/*"
      tags:
        - vpn
        - prepare

    - name: vpn | copy files to system location
      copy:
        src="{{ project_root }}/private/{{ item.src }}"
        dest={{ item.dest }}
      become: true
      with_items:
        - { src: 'current/auth.conf', dest: '/etc/custom_vpn/auth.conf' }
        - { src: 'current/office.ovpn', dest: '/etc/custom_vpn/office.ovpn' }
      tags:
        - vpn

    - name: vpn | restart service
      service: name=job-vpn state=restarted
      become: true
      tags:
        - vpn
        - service

    - name: ripgrep | clone repository
      git:
        repo=https://github.com/BurntSushi/ripgrep
        dest={{ ripgrep_repo_location }}
        force=yes
      tags:
        - cli

    - name: ripgrep | build
      shell: cargo build --release
      args:
        chdir: '{{ ripgrep_repo_location }}'
      tags:
        - cli

    - name: ripgrep | install binary
      shell: "mv {{ ripgrep_repo_location }}/target/release/rg {{ project_root }}/utils/rg"
      tags:
        - cli

    - name: ripgrep | make system symlinks
      file:
        src={{ project_root }}/utils/rg
        dest=/usr/bin/rg
        state=link
      become: true
      tags:
        - cli

    - name: download Telegram Desktop archive
      get_url:
        url: https://updates.tdesktop.com/tlinux/tsetup.{{ telegram_version }}.tar.xz
        dest: /tmp/tsetup.tar.xz
      tags:
        - tg

    - name: update Telegram Desktop binaries
      unarchive:
        src: /tmp/tsetup.tar.xz
        dest: /usr/local/bin
        extra_opts:
          - "--strip=1"
      become: true
      tags:
        - tg

    - name: sshuttle | restart service
      service: name=sshuttle state=restarted
      become: true
      tags:
        - sshuttle
        - service

    - name: install tmux plugin manager
      git:
        repo=https://github.com/tmux-plugins/tpm
        dest={{ ansible_env.HOME }}/.tmux/plugins/tpm
      tags:
        - tmux

    - name: imapfilter | remove old config file
      file: path="{{ imapfilter_config }}" state=absent
      tags:
        - mail

    - name: imapfilter | seed base config
      shell: "cat {{ mail_configs_dir }}/imapfilter-base.lua >> {{ imapfilter_config }} && echo -e -n '\n' >> {{ imapfilter_config }}"
      tags:
        - mail

    - name: imapfilter | populate with account configs
      shell: "cat {{ item }} >> {{ imapfilter_config }} && echo -e -n '\n' >> {{ imapfilter_config }}"
      with_fileglob:
        - "{{ imapfilter_d_path }}/*"
      tags:
        - mail

    - name: imapfilter | copy generated config file
      copy: src="{{ imapfilter_config }}" dest={{ ansible_env.HOME }}/.imapfilter/config.lua
      tags:
        - mail

    - name: imapfilter | Remove generated config file
      file: path="{{ imapfilter_config }}" state=absent
      tags:
        - mail

    - name: register org-protocol handler in mimeapps
      lineinfile:
        dest={{ ansible_env.HOME }}/.local/share/applications/mimeapps.list
        line=x-scheme-handler/org-protocol=emacsclient.desktop
        state=present
      tags:
        - assoc

    - name: setup xdg-open associations
      shell: xdg-mime default {{ item.program }}.desktop {{ item.mimetype }}
      with_items:
        - { program: 'firefox', mimetype: 'text/html' }
        - { program: 'vlc', mimetype: 'video/avi' }
        - { program: 'vlc', mimetype: 'video/mpeg' }
        - { program: 'vlc', mimetype: 'video/x-flv' }
        - { program: 'vlc', mimetype: 'video/mp4' }
        - { program: 'vlc', mimetype: 'video/x-ms-wmv' }
        - { program: 'vlc', mimetype: 'video/x-matroska' }
        - { program: 'zathura', mimetype: 'application/pdf' }
        - { program: 'zathura', mimetype: 'application/x-pdf' }
        - { program: 'zathura', mimetype: 'image/vnd.djvu' }
        - { program: 'zathura', mimetype: 'image/x-djvu' }
        - { program: 'feh', mimetype: 'image/jpeg' }
        - { program: 'feh', mimetype: 'image/png' }
        - { program: 'abiword', mimetype: 'application/msword' }
      tags:
        - assoc
