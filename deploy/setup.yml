- hosts: localhost

  tasks:

    - include_vars: common_vars.yml
      tags:
        - always

    - name: register current time
      shell: 'date +%Y%m%d%H%M%S'
      register: current_run_timestamp
      tags:
        - always

    - name: ensure some system dirs exists
      file:
        path={{ item }}
        state=directory
      become: true
      with_items: "{{ system_dirs }}"
      tags:
        - system
        - prepare

    - name: clean up system files in favor of symlinks
      file:
        path={{ item }}
        state=absent
      become: true
      with_items: "{{ entries_to_symlinks }}"
      tags:
        - system
        - prepare-cleanup

    - name: make system symlinks
      file:
        src={{ project_root }}/{{ item.src }}
        dest={{ item.dest }}
        state=link
      become: true
      with_items: "{{ system_symlinks }}"
      tags:
        - system

    - name: instantiate Docker config template
      template: src={{ project_root }}/conf.d/system/docker.template dest=/etc/conf.d/docker
      become: true
      tags:
        - system
        - docker

    # TODO: set permissions on /etc/conf.d/docker

    # TODO think of moving this to shell level
    # consult with "world" file
    # reduce time for checks
    - name: ensure some packages installed (Gentoo)
      portage: package={{ item }} state=present
      with_items: "{{ packages_of_interest }}"
      become: true
      when:
        - ansible_distribution == "Gentoo"
        - check_packages_installed
      tags:
        - system
        - portage

    - name: prepare global gitconfig
      template: src={{ project_root }}/conf.d/user/dev/gitconfig.template dest=/etc/gitconfig
      become: true
      tags:
        - system
        - dev

    - name: ensure some directories exist
      file:
        path={{ ansible_env.HOME }}/{{ item }}
        state=directory
      with_items: "{{ homedir_subdirs }}"
      tags:
        - homedir
        - prepare

    - name: make homedir symlinks
      file:
        src={{ project_root }}/{{ item.src }}
        dest={{ ansible_env.HOME }}/{{ item.dest }}
        state=link
      with_items: "{{ homedir_symlinks }}"
      tags:
        - homedir

    - name: instantiate common settings
      template: src={{ project_root }}/conf.d/user/{{ item }}.template dest={{ ansible_env.HOME }}/{{ item }}
      with_items:
        - "{{ common_settings_basenames }}"
      tags:
        - homedir
        - common-settings

    - stat: path={{ ansible_env.HOME }}/.bashrc
      register: bashrc
      tags:
        - homedir
        - bash

    - name: bash | source common settings
      lineinfile:
        dest={{ ansible_env.HOME }}/.bashrc
        line='source ~/common_settings_bash'
        state=present
      when:
        bashrc.stat.exists == True
      tags:
        - homedir
        - bash

    - include_vars: common_vars.yml
      tags:
        - always

    - name: Buildapp | clone repo
      git:
        repo={{ buildapp_traits.clone_from }}
        dest={{ buildapp_traits.local_path }}
        force=yes
      tags:
        - buildapp
        - infra
        - remote

    - name: Buildapp | build
      make:
        chdir: "{{ buildapp_traits.local_path }}"
        target: buildapp
      tags:
        - buildapp
        - infra

    - name: Buildapp | install
      make:
        chdir: "{{ buildapp_traits.local_path }}"
        target: install
      become: yes
      tags:
        - buildapp
        - infra

    - name: accompanying tools | shepherd build (mail checking tool)
      make:
        chdir: "{{ project_root }}/src/shepherd"
        target: all
      tags:
        - shepherd
        - mail

    - name: accompanying tools | shepherd install (mail checking tool)
      shell: "mv {{ project_root }}/src/shepherd/builds/shepherd {{ project_root }}/utils/shepherd"
      tags:
        - shepherd
        - mail

    - name: git-quick-stats | clone repository
      git:
        repo={{ gqs_traits.clone_from }}
        dest={{ gqs_traits.local_path }}
        force=yes
      tags:
        - cli
        - gqs
        - remote

    - name: git-quick-stats | install
      make:
        chdir: "{{ gqs_traits.local_path }}"
        target: install
      become: yes
      tags:
        - cli
        - gqs

    - name: git-quick-stats | uninstall
      make:
        chdir: "{{ gqs_traits.local_path }}"
        target: uninstall
      tags:
        - uninstall

    - name: download Telegram Desktop archive
      get_url:
        url: https://updates.tdesktop.com/tlinux/tsetup.{{ telegram_version }}.tar.xz
        dest: /tmp/tsetup.tar.xz
        force: yes
      tags:
        - tg
        - remote

    - name: update Telegram Desktop binaries
      unarchive:
        src: /tmp/tsetup.tar.xz
        dest: /usr/local/bin
        extra_opts:
          - "--strip=1"
      become: true
      tags:
        - tg

    - name: install tmux plugin manager
      git:
        repo=https://github.com/tmux-plugins/tpm
        dest={{ ansible_env.HOME }}/.tmux/plugins/tpm
      tags:
        - tmux
        - remote

    - name: tmuxifier | clone repo
      git:
        repo={{ tmuxifier_traits.clone_from }}
        dest={{ tmuxifier_traits.local_path }}
        force=yes
      tags:
        - tmux
        - remote

    - name: tmuxifier | update configs
      blockinfile:
        dest: "{{ ansible_env.HOME }}/{{ item[0] }}"
        insertafter: "{{ item[1].after }}"
        block: |
          {{ item[1].block }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item[1].idx }}"
        state: present
      with_nested:
        - "{{ common_settings_basenames }}"
        - [{ idx: 1,  block: "    $HOME/.tmuxifier/bin", after: "^BIN_DIRS=\\(" },
           { idx: 2, block: "eval \"$(tmuxifier init -)\"", after: "EOF"}]
      tags:
        - tmux
    # TODO: think of way to rerun some links/path population steps after this

    - name: imapfilter | remove old config file
      file: path="{{ imapfilter_config }}" state=absent
      tags:
        - mail

    - name: imapfilter | seed base config
      shell: "cat {{ mail_configs_dir }}/imapfilter-base.lua >> {{ imapfilter_config }} && echo -e -n '\n' >> {{ imapfilter_config }}"
      tags:
        - mail

    - name: imapfilter | populate with account configs
      shell: "cat {{ item }} >> {{ imapfilter_config }} && echo -e -n '\n' >> {{ imapfilter_config }}"
      with_fileglob:
        - "{{ imapfilter_d_path }}/*"
      tags:
        - mail

    - name: imapfilter | copy generated config file
      copy: src="{{ imapfilter_config }}" dest={{ ansible_env.HOME }}/.imapfilter/config.lua
      tags:
        - mail

    - name: imapfilter | Remove generated config file
      file: path="{{ imapfilter_config }}" state=absent
      tags:
        - mail

    - name: register org-protocol handler in mimeapps
      lineinfile:
        dest={{ ansible_env.HOME }}/.local/share/applications/mimeapps.list
        line=x-scheme-handler/org-protocol=emacsclient.desktop
        state=present
      tags:
        - assoc

    - name: setup xdg-open associations
      shell: xdg-mime default {{ item.program }}.desktop {{ item.mimetype }}
      with_items: "{{ mime_assocs }}"
      tags:
        - assoc

    - include_vars: xsession_vars.yml
      tags:
        - xsession

    - name: generate .xsession script
      template: src={{ project_root }}/conf.d/X11/.xsession.template dest={{ ansible_env.HOME }}/.xsession
      tags:
        - xsession

    - name: ensure .xsession permissions
      file:
        path: "{{ ansible_env.HOME }}/.xsession"
        mode: 0755
      tags:
        - xsession

    - name: addrlookup | clone repo
      git:
        repo={{ addrlookup_traits.clone_from }}
        dest={{ addrlookup_traits.local_path }}
        force=yes
      tags:
        - notmuch
        - remote

    - name: addrlookup | build
      shell: make
      args:
        chdir: '{{ addrlookup_traits.local_path }}'
      tags:
        - notmuch

    - name: addrlookup | install binary
      shell: "mv {{ addrlookup_traits.local_path }}/notmuch-addrlookup /usr/bin"
      become: true
      tags:
        - notmuch

    - name: addrlookup | ensure binary permissions
      file:
        path: "/usr/bin/notmuch-addrlookup"
        mode: 0644
        owner: root
        group: root
      become: true
      tags:
        - notmuch

    - name: httplab | install
      shell: go get github.com/gchaincl/httplab
      tags:
        - devtools

      # TODO: https://github.com/asciimoo/wuzz - master/HEAD is broken (SIGSEGV), try later

    - name: Zshnip | clone repo
      git:
        repo={{ zshnip_traits.clone_from }}
        dest={{ zshnip_traits.local_path }}
        force=yes
      tags:
        - cli
        - zshnip

    - name: Zshnip | copy file(s)
      copy:
        src="{{ zshnip_traits.local_path }}/zshnip.zsh"
        dest="{{ project_root }}/utils"
      tags:
        - cli
        - zshnip

    - name: Zshnip | configure Zsh
      lineinfile:
        dest="{{ project_root }}/conf.d/user/zsh/.zsh/custom"
        line="source zshnip.zsh"
        state=present
      tags:
        - cli
        - zshnip

    - name: Zshnip | configure Zsh | bind keys
      lineinfile:
        path: "{{ project_root }}/conf.d/user/zsh/.zsh/bindkeys"
        line: "{{ item }}"
      with_items:
        - "\nbindkey '\ej' zshnip-expand-or-edit"
        - "bindkey '\ee' zshnip-edit-and-expand"
      tags:
        - cli
        - zshnip

    - name: start devdns
      docker_container:
        name: devdns
        image: ruudud/devdns
        state: started
        expose:
          - 53:53/udp
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
      tags:
        - devtools
        - docker
        - infra

    - name: setup devdns host <-> containers resolving
      blockinfile:
        path: /etc/dhcp/dhclient.conf
        block: |
          supersede domain-name "dev";
          prepend domain-name-servers 127.0.0.1;
      become: true
      tags:
        - devtools
        - docker
        - infra

    - name: install pip packages (Python)
      pip:
        name: "{{ item }}"
        state: latest
        extra_args: --user
      with_items: "{{ python_pip_packages }}"
      tags:
        - devtools
        - python-libs

    - name: stop devdns container
      docker_container:
        name: devdns
        state: stopped
      tags:
        - prepare-cleanup

    - name: remove devdns host <-> containers resolving
      blockinfile:
        path: /etc/dhcp/dhclient.conf
        block: |
          supersede domain-name "dev";
          prepend domain-name-servers 127.0.0.1;
        state: absent
      become: true
      tags:
        - prepare-cleanup

    - name: Hexchat | download theme
      get_url:
        url: https://dl.hexchat.net/themes/Zenburn.hct
        dest: /tmp/Zenburn.hct
        force: yes
      tags:
        - IRC
        - remote

    - name: Hexchat | apply theme
      unarchive:
        src: /tmp/Zenburn.hct
        dest: "{{ ansible_env.HOME }}/.config/hexchat"
      tags:
        - IRC

    - name: THD | clone repo
      git:
        repo={{ thd_traits.clone_from }}
        dest={{ thd_traits.local_path }}
        force=yes
      tags:
        - cli
        - thd

    - name: THD | update config
      template: src={{ project_root }}/conf.d/user/thd_config.template dest={{ thd_traits.local_path }}/config.yaml
      tags:
        - cli
        - thd

    - name: THD | start telegram-cli
      shell: "nohup telegram-cli --json -P {{ tg_cli_port }} -v 0 &"
      tags:
        - cli
        - thd

    - name: THD | perform dump
      shell: "ruby telegram-history-dump.rb{% if tg_backup_kill_tg %} --kill-tg{% endif %}"
      args:
        chdir: '{{ thd_traits.local_path }}'
      tags:
        - cli
        - thd

    # TODO: setup znc on octocat.ru
    # TODO: think of fonts setup automating (e.g. dowloading, copying, updating fontcache, whatever)
